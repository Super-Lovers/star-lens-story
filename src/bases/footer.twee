:: PassageFooter

<!--****************************************
// Passage elements implementation
****************************************-->
<<script>>
let $console_screen, $choices_screen, $passages, $wallpaper;
let passages_width;
let $passage_content;

// Dimensions of consoles
let console_screen_width, console_screen_height;
let choices_screen_width, choices_screen_height;

const glitch_chars = [
    'ϟ', '!', '/', '$', '⊄', '□', '⨹', '⦕', '⩷', '◺', '░', '⋋'
];

$(document).ready(function() {
    $passages = $('#passages');
    $console_screen = $('#console-screen');
    $choices_screen = $('#choices-screen');
    $wallpaper = $('.wallpaper');

    passages_width = $passages.width();
    const initial_width_console = passages_width;

    // Console screen
    console_screen_width = passages_width - (passages_width / 4);
    console_screen_height = initial_width_console - (passages_width / 4);

    $console_screen.width(console_screen_width);
    $console_screen.height(console_screen_height);

    // Choices screen
    choices_screen_height = initial_width_console - (initial_width_console / 1.3);

    $choices_screen.height(choices_screen_height);
    choices_screen_width = $choices_screen.width();

    const $passage_content = $('#console-screen>.passage-content');

    $passage_content.height(console_screen_width - (console_screen_width / 2.5));

    // Wallpaper
    $wallpaper.width($console_screen);
    $wallpaper.height($console_screen);

    // Cleaning up the DOM after rendering the passage
    $passage_content.empty();

    // Displaying the current passage onto the pre-defined interface
    let index_of_children = 3;
    const $current_passage_elements = $('.passage').contents();
    for (let i = 0; i < $current_passage_elements.length; i++) {
        const element = $current_passage_elements[i];
        if ($(element).hasClass('screen')) {
            index_of_children = i + 1;
        }
    }

    if (Config.debug == false) {
        for (let i = index_of_children; i < $current_passage_elements.length; i++) {
            const element = $current_passage_elements[i];
            $passage_content.append(element);
        }
    } else {
        for (let i = index_of_children; i < $current_passage_elements.length - 3; i++) {
            const element = $current_passage_elements[i];
            $passage_content.append(element);
        }
    }

    // Moving the choice buttons to the interactable interface
    const $choice_buttons = $('.choice-button');
    
    for (let i = 0; i < $choice_buttons.length; i++) {
        const element = $choice_buttons[i];
        
        $choices_screen.prepend(element);
    }

    // Makes the choice buttons in the current passage
    // interactable, so that they can take you to new passages
    $choice_buttons.on('click', function() {
        Engine.play($(this).attr('name'));
    });

    const glitch_texts_original = $('body').find('.glitch-text').toArray();
    const glitch_texts_original_texts = [];

    for (let i = 0; i < glitch_texts_original.length; i++) {
        const element = $(glitch_texts_original[i]).text();
        
        glitch_texts_original_texts.push(element);
    }
    const glitch_texts = $('body').find('.glitch-text');
        
    if (glitch_texts.length > 0) {
        setInterval(function() {
            for (let i = 0; i < glitch_texts.length; i++) {
                const text = $(glitch_texts[i]);
                let text_content = text.text();
                const number_of_iterations = Math.floor(Math.random() * text_content.length - 1);
                let new_text;

                for (let j = 0; j < number_of_iterations; j++) {
                    const random_char_index = Math.floor(Math.random() * text_content.length);

                    let new_char;
                    let chance_of_glitch = 90;
                    let result = Math.floor(Math.random() * 100);

                    if (result < chance_of_glitch) {
                        new_char = glitch_chars[Math.floor(Math.random() * glitch_chars.length)];
                    } else {
                        new_char = $(glitch_texts_original[i]).text()[random_char_index];
                    }

                    new_text = text_content.substring(0, random_char_index) + new_char + text_content.substring(random_char_index + 1);

                    text_content = new_text;
                }
    
                text.text(text_content);
            }
        }, 100);

        setInterval(function() {
            for (let i = 0; i < glitch_texts.length; i++) {
                const glitch_element = $(glitch_texts[i]);
                const original_element = glitch_texts_original_texts[i];
                
                glitch_element.text(original_element);
            }
        }, 500);
        
        // for (let i = 0; i < glitch_texts_original.length; i++) {
        //     const text = $(glitch_texts_original[i]);
        //     const text_content = text.text();

        //     $(glitch_texts[i]).text(text_content);
        // }
    }
});

$(window).resize(function() {
    passages_width = $passages.width();
    choices_screen_width = $choices_screen.width();

    const $passage_content = $('#console-screen>.passage-content');
    $wallpaper = $('.wallpaper');
    
    // Console screen
    console_screen_width = passages_width - (passages_width / 4);
    console_screen_height = passages_width - (passages_width / 4);

    $console_screen.width(console_screen_width);
    $console_screen.height(console_screen_height);

    // Choices screen
    $choices_screen.height(choices_screen_width - (choices_screen_width / 2));
    choices_screen_width = $choices_screen.width();

    $passage_content.height(console_screen_width - (console_screen_width / 2.5));

    // Wallpaper
    $wallpaper.width($console_screen);
    $wallpaper.height($console_screen);
});

$(document).on(':passagerender', function (ev) {
    if ($passages != null) {
        passages_width = $passages.width();
        choices_screen_width = $choices_screen.width();

        $console_screen.width(console_screen_width);
        $console_screen.height(console_screen_height);
    
        $choices_screen.height(choices_screen_width - (choices_screen_width / 2));

        const $passage_content = $('#console-screen>.passage-content');

        $passage_content.height(console_screen_width - (console_screen_width / 2.5));
        
        $wallpaper = $('.wallpaper');

        // Wallpaper
        $wallpaper.width($console_screen);
        $wallpaper.height($console_screen);
        // Cleaning up the DOM after rendering the passage
        $console_screen.empty();

        // Displaying the current passage onto the pre-defined interface
        let index_of_children = 3;
        const $current_passage_elements = $('.passage').contents();
        for (let i = 0; i < $current_passage_elements.length; i++) {
            const element = $current_passage_elements[i];
            if ($(element).hasClass('screen')) {
                index_of_children = i + 1;
            }
        }
    
        if (Config.debug == false) {
            for (let i = index_of_children; i < $current_passage_elements.length; i++) {
                const element = $current_passage_elements[i];
                $passage_content.append(element);
            }
        } else {
            for (let i = index_of_children; i < $current_passage_elements.length - 3; i++) {
                const element = $current_passage_elements[i];
                $passage_content.append(element);
            }
        }

        // Moving the choice buttons to the interactable interface
        const $choice_buttons = $('.choice-button');

        // Makes the choice buttons in the current passage
        // interactable, so that they can take you to new passages
        $choice_buttons.on('click', function() {
            Engine.play($(this).attr('name'));
        });
        
        for (let i = 0; i < $choice_buttons.length; i++) {
            const element = $choice_buttons[i];
            
            $choices_screen.prepend(element);
        }
    }
});

$(document).on(':typingcomplete', function(ev) {
    $(document).ready(function() {
        let choice_buttons = $('.choice-button');

        for (let i = 0; i < choice_buttons.length; i++) {
            $(choice_buttons[i]).css('display', 'block');
            $(choice_buttons[i]).on('click', function() {
                SimpleAudio.select("button").volume(0.3).play();
            });
        }
    });
});

$(document).on(':typingstart', function(ev) {
    $(document).ready(function() {
        SimpleAudio.select("console_output")
            .volume(0.3)
            .loop(true)
            .play();
    });
});

$(document).on(':typingstop', function(ev) {
    $(document).ready(function() {
        SimpleAudio.select("console_output").stop();
    });
});
<</script>>